import { deepMerge } from 'collections/deep_merge.ts';
import { parse, stringify } from 'yaml/mod.ts';
import { DumperStateOptions } from 'yaml/_dumper/dumper_state.ts';

const DISCLAIMER: string = '# NOTE: Auto-generated by hooks/pre-commit. Do not edit manually!';
const DUMP_OPTIONS: DumperStateOptions = { lineWidth: 999 };

export function buildJobsConfigMap (instanceName: string, folderName: string, scripts: string[]): string {
  const scriptAsObject: object = {
    jobs: scripts.map((script: string) => ({ script: `${script}\n` })),
  };

  const scriptAsString: string = stringify(scriptAsObject, DUMP_OPTIONS)
    .replaceAll(/\n{3,}/g, '\n\n');

  const yamlAsObject: object = {
    apiVersion: 'v1',
    kind: 'ConfigMap',
    metadata: {
      name: `${instanceName}-jobs-${folderName}`,
      namespace: 'ci',
      labels: {
        [ `${instanceName}-jenkins-config` ]: 'true',
      },
    },
    data: {
      [ `jobs-${folderName}.yaml` ]: scriptAsString,
    },
  };

  return `${DISCLAIMER}\n${stringify(yamlAsObject, DUMP_OPTIONS)}`;
}

export function buildCascConfigMap (instanceName: string, configsAsString: string[]): string {
  const fullConfiguration: object[] = configsAsString
    .map((configAsString: string) => parse(configAsString))
    .reduce((seed, part) => deepMerge(seed, part), {});

  const yamlAsObject: object = {
    apiVersion: 'v1',
    kind: 'ConfigMap',
    metadata: {
      name: `${instanceName}-casc`,
      namespace: 'ci',
      labels: {
        [ `${instanceName}-jenkins-config` ]: 'true',
      },
    },
    data: {
      [ 'jenkins.yaml' ]: stringify(fullConfiguration, DUMP_OPTIONS),
    },
  };

  return `${DISCLAIMER}\n${stringify(yamlAsObject, DUMP_OPTIONS)}`;
}
